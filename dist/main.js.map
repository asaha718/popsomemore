{"version":3,"sources":["webpack://popsomemore/./src/scripts/balloon.js","webpack://popsomemore/./src/scripts/player.js","webpack://popsomemore/./src/scripts/projectile.js","webpack://popsomemore/./src/index.js","webpack://popsomemore/./src/scripts/game.js"],"names":["CONSTANTS","DX","Math","random","DY","RADIUS","Balloon","dimensions","this","x","width","y","ctx","beginPath","arc","PI","fillStyle","fill","closePath","height","moveBalloon","drawBalloon","Player","iconX","iconY","rightPressed","leftPressed","fillRect","key","drawPlayer","Projectile","pos_x","pos_y","fired","strokeStyle","lineWidth","stroke","drawProjectile","canvas","getContext","player","balloon","projectile","registerEvents","document","addEventListener","keyDownHandler","bind","keyUpHandler","e","console","log","movePlayer","code","moveProjectile","stopPlayer","clearRect","animate","requestAnimationFrame","getElementById"],"mappings":"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","file":"main.js","sourcesContent":["const CONSTANTS= { \n    DX: (Math.random() * 2), \n    DY: (Math.random() * 2),  \n    RADIUS: 68  \n}\n\nexport default class Balloon{ \n    constructor(dimensions){ \n        this.dimensions= dimensions; \n        this.x = this.dimensions.width/2; \n        this.y = 80; \n    }\n\n    drawBalloon(ctx){\n        // ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height); \n        ctx.beginPath();\n        ctx.arc(this.x, this.y, CONSTANTS.RADIUS, 0, Math.PI*2);\n        ctx.fillStyle = \"#c47de8\";\n        ctx.fill();\n        ctx.closePath(); \n    }\n\n    moveBalloon(){ \n        if(this.x + CONSTANTS.DX > this.dimensions.width-CONSTANTS.RADIUS || this.x + CONSTANTS.DX < CONSTANTS.RADIUS) {\n            CONSTANTS.DX = -1 * CONSTANTS.DX;\n        }\n        if(this.y + CONSTANTS.DY > this.dimensions.height-CONSTANTS.RADIUS || this.y + CONSTANTS.DY < CONSTANTS.RADIUS) {\n            CONSTANTS.DY = -1 * CONSTANTS.DY;\n        }\n        this.x += CONSTANTS.DX;  \n        this.y += CONSTANTS.DY;\n    }\n\n    animate(ctx){\n        this.moveBalloon(); \n        this.drawBalloon(ctx); \n    }\n}","const CONSTANTS= { \n    PLAYER_WIDTH: 15, \n    PLAYER_HEIGHT: 45, \n}; \n\nexport default class Player{ \n    constructor(dimensions){ \n        this.dimensions= dimensions\n        this.iconX=(this.dimensions.width - CONSTANTS.PLAYER_WIDTH)/2; \n        this.iconY= this.dimensions.height - CONSTANTS.PLAYER_HEIGHT;\n        this.rightPressed = false;\n        this.leftPressed = false; \n    }\n\n    drawPlayer(ctx){ \n        ctx.beginPath() \n        ctx.fillRect(this.iconX, \n            this.iconY, \n            CONSTANTS.PLAYER_WIDTH, \n            CONSTANTS.PLAYER_HEIGHT\n        )\n        ctx.fillStyle = \"#0095DD\";\n        ctx.fill();\n        ctx.closePath();\n\n        if(this.rightPressed) {\n            // console.log(\"CLICKED\")\n            this.iconX += 7;\n            if (this.iconX + CONSTANTS.PLAYER_WIDTH > this.dimensions.width){\n                this.iconX = this.dimensions.width - CONSTANTS.PLAYER_WIDTH;\n            }\n        }\n        else if(this.leftPressed) {\n            this.iconX -= 7;\n            if (this.iconX < 0){\n                this.iconX = 0;\n            }\n        }\n    }\n\n    movePlayer(key){ \n        // console.log(\"move\")\n        if(key === \"Right\" || key === \"ArrowRight\"){ \n            this.rightPressed = true\n            // console.log(\"RIGHT\")\n        } else if ( key=== \"Left\" || key === \"ArrowLeft\"){ \n            this.leftPressed = true\n            // console.log(\"LEFT\")\n        }\n    }\n\n    stopPlayer(){ \n        this.rightPressed = false; \n        this.leftPressed = false; \n    }\n\n    animate(ctx){ \n        this.drawPlayer(ctx); \n\n    }\n}","const CONSTANTS= { \n    RADIUS: 2 \n}\n\nexport default class Projectile{ \n    constructor(pos_x, pos_y){ \n        this.pos_x= pos_x; \n        this.pos_y= pos_y;\n        this.fired= false;   \n    }\n\n    drawProjectile(ctx, x, y){ \n        ctx.strokeStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(this.pos_x, this.pos_y, CONSTANTS.RADIUS, 0, 2 * Math.PI);\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = \"red\";\n        ctx.stroke();\n\n        if (this.fired){ \n            this.pos_y -= 5\n            if(this.pos_y <= 0){ \n                this.pos_x= x; \n                this.pos_y= y;\n                this.fired= false;  \n            }\n        }else{\n            this.pos_x= x; \n            this.pos_y= y; \n        } \n            \n    }\n\n    moveProjectile(){ \n        this.fired= true; \n    }\n\n    animate(ctx, x, y){ \n        this.drawProjectile(ctx, x, y)\n    }\n}","import PopSomeMore from \"./scripts/game\";\nimport './styles/index.css'; \n\nconst canvas= document.getElementById(\"balloon-game\"); \nconst game= new PopSomeMore(canvas);\n// debugger\ngame.animate()","import Balloon from './balloon';\nimport Player from './player'; \nimport Projectile from './projectile'; \n\nexport default class PopSomeMore{ \n    constructor(canvas){ \n        this.ctx= canvas.getContext(\"2d\"); \n        this.dimensions= { width: canvas.width, height: canvas.height };\n        this.player= new Player(this.dimensions); \n        this.balloon = new Balloon(this.dimensions); \n        this.projectile = new Projectile(this.player.iconX, this.player.iconY); \n        this.registerEvents()\n    }\n\n    registerEvents(){ \n        document.addEventListener(\"keydown\", this.keyDownHandler.bind(this), false)\n        document.addEventListener(\"keyup\", this.keyUpHandler.bind(this), false)\n    }\n\n    keyDownHandler(e){\n        console.log(e.key)\n        if(e.key === \"Right\" || e.key === \"ArrowRight\") {\n            this.player.movePlayer(e.key); \n        }\n        else if(e.key === \"Left\" || e.key === \"ArrowLeft\") {\n            this.player.movePlayer(e.key); \n        }\n        else if(e.code === \"Space\"){ \n            this.projectile.moveProjectile()\n        }\n    }\n    \n    keyUpHandler(e){ \n        if(e.key == \"Right\" || e.key == \"ArrowRight\") {\n            this.player.stopPlayer(); \n        }\n        else if(e.key == \"Left\" || e.key == \"ArrowLeft\") {\n            this.player.stopPlayer(); \n        }\n    }\n\n    animate(){ \n        this.ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height); \n        this.balloon.animate(this.ctx); \n        this.player.animate(this.ctx); \n        this.projectile.animate(this.ctx, this.player.iconX, this.player.iconY); \n        requestAnimationFrame(this.animate.bind(this)); \n    }\n}"],"sourceRoot":""}