{"version":3,"sources":["webpack://popsomemore/./src/scripts/balloon.js","webpack://popsomemore/./src/scripts/player.js","webpack://popsomemore/./src/scripts/projectile.js","webpack://popsomemore/./src/scripts/game.js","webpack://popsomemore/./src/index.js"],"names":["Balloon","x","y","type","r","this","c_width","c_height","speed","speedX","getRndInteger","speedY","moveLeft","moveUp","ctx","beginPath","arc","Math","PI","fillStyle","fill","closePath","alert","document","location","reload","clearInterval","interval","moveBalloon","drawBalloon","min","max","floor","random","Player","dimensions","iconX","width","iconY","height","rightPressed","leftPressed","fillRect","key","drawPlayer","Projectile","pos_x","pos_y","fired","strokeStyle","lineWidth","stroke","otherobj","myleft","myright","mytop","mybottom","otherleft","otherright","othertop","otherbottom","crash","drawProjectile","Projectiles","Balloons","spawnX","spawnY","spawnMini","shoot","canvas","getContext","player","balloons","push","projectiles","registerEvents","spawnBalloon","score","addEventListener","keyDownHandler","bind","keyUpHandler","e","movePlayer","code","stopPlayer","x1","x2","y1","y2","r1","r2","dsx","dsy","sqrt","doubleBalloon","font","fillText","clearRect","length","forEach","balloon","i","arr","projectile","j","arr2","animate","collisionDetection","splice","moveProjectile","drawScore","requestAnimationFrame","getElementById"],"mappings":"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","file":"main.js","sourcesContent":["// const CONSTANTS= { \n//     DX: getRndInteger(0.5,3.5), \n//     DY: getRndInteger(0.5,3.5)\n// }\n\nexport default class Balloon{ \n    constructor(x, y, type, r = 68){ \n        // this.dimensions= dimensions; \n        this.x = x; \n        this.y = y;\n        this.c_width= 480; \n        this.c_height= 620; \n        this.r= r; \n        this.type= type;\n        this.speed= 2; \n        this.speedX =getRndInteger(0.5,1.2) \n        this.speedY = getRndInteger(0.5,1.2)\n        this.moveLeft= false;   \n        this.moveUp= false;  \n    }\n\n    drawBalloon(ctx){\n        // ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height); \n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, Math.PI*2);\n        ctx.fillStyle = \"#c47de8\";\n        ctx.fill();\n        ctx.closePath(); \n    }\n\n    moveBalloon(){ \n        if(this.x + this.r >= this.c_width || this.x  <=  this.r) {\n            this.speedX = -1 * this.speedX;\n        }\n        if(this.y  <=  this.r) {\n            this.speedY = -1 * this.speedY;\n        }else if (this.y + this.r >= this.c_height){ \n            alert(\"GAME OVER\");\n            document.location.reload();\n            clearInterval(interval);\n        }\n        if(this.type == 'firstBalloon')\n        {\n            this.x += this.speedX;  \n            this.y += this.speedY;\n        }else{\n            if(this.type == 'mini-balloon-left')\n            {\n                this.x -= this.speedX;  \n                this.y += this.speedY;\n            }\n            else{\n                this.x += this.speedX;  \n                this.y += this.speedY;\n            }\n        }\n      \n    }\n\n    animate(ctx){\n        this.moveBalloon(); \n        this.drawBalloon(ctx); \n    }\n}\n\n\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) ) + min;\n  }\n  ","const CONSTANTS= { \n    PLAYER_WIDTH: 15, \n    PLAYER_HEIGHT: 45, \n}; \n\nexport default class Player{ \n    constructor(dimensions){ \n        this.dimensions= dimensions\n        this.iconX=(this.dimensions.width - CONSTANTS.PLAYER_WIDTH)/2; \n        this.iconY= this.dimensions.height - CONSTANTS.PLAYER_HEIGHT;\n        this.rightPressed = false;\n        this.leftPressed = false; \n    }\n\n    drawPlayer(ctx){ \n        ctx.beginPath() \n        ctx.fillRect(this.iconX, \n            this.iconY, \n            CONSTANTS.PLAYER_WIDTH, \n            CONSTANTS.PLAYER_HEIGHT\n        )\n        ctx.fillStyle = \"#0095DD\";\n        ctx.fill();\n        ctx.closePath();\n\n        if(this.rightPressed) {\n            this.iconX += 7;\n            if (this.iconX + CONSTANTS.PLAYER_WIDTH > this.dimensions.width){\n                this.iconX = this.dimensions.width - CONSTANTS.PLAYER_WIDTH;\n            }\n        }\n        else if(this.leftPressed) {\n            this.iconX -= 7;\n            if (this.iconX < 0){\n                this.iconX = 0;\n            }\n        }\n    }\n\n    movePlayer(key){ \n        if(key === \"Right\" || key === \"ArrowRight\"){ \n            this.rightPressed = true\n        } else if ( key=== \"Left\" || key === \"ArrowLeft\"){ \n            this.leftPressed = true\n        }\n    }\n\n    stopPlayer(){ \n        this.rightPressed = false; \n        this.leftPressed = false; \n    }\n\n    animate(ctx){ \n        this.drawPlayer(ctx); \n    }\n}","const CONSTANTS= { \n    RADIUS: 2 \n}\n\nexport default class Projectile{ \n    constructor(pos_x, pos_y,type){ \n        this.pos_x= pos_x; \n        this.pos_y= pos_y;\n        this.fired= false;\n        this.type = type   \n    }\n\n    drawProjectile(ctx, x, y){ \n        ctx.strokeStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(this.pos_x, this.pos_y, CONSTANTS.RADIUS, 0, 2 * Math.PI);\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = \"red\";\n        ctx.stroke();\n\n        // if (this.fired){ \n        //     this.pos_y -= 5\n        //     if(this.pos_y <= 0){ \n        //         // this.pos_x= x; \n        //         // this.pos_y= y;\n        //         this.fired= false;  \n        //     }\n        // }else{\n        //     this.pos_x= x; \n        //     this.pos_y= y; \n        // } \n            \n    }\n\n    moveProjectile(){ \n        this.pos_y -= 5\n    }\n    crashWith(otherobj){\n        var myleft = this.x;\n        var myright = this.x + (this.r);\n        var mytop = this.y;\n        var mybottom = this.y + (this.r);\n        var otherleft = otherobj.x;\n        var otherright = otherobj.x + (otherobj.r);\n        var othertop = otherobj.y;\n        var otherbottom = otherobj.y + (otherobj.r);\n        var crash = true;\n        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {\n            crash = false;\n        }\n        return crash;\n    }\n\n    animate(ctx, x, y){ \n        this.drawProjectile(ctx, x, y)\n    }\n}","import Balloon from './balloon';\nimport Player from './player'; \nimport Projectile from './projectile'; \n\nlet Projectiles= []; \nlet Balloons= [];\nlet spawnX= 0; \nlet spawnY= 0; \nlet spawnMini = false;\nlet shoot = false;\n\n\nexport default class PopSomeMore{ \n    constructor(canvas){ \n        this.ctx= canvas.getContext(\"2d\"); \n        this.dimensions= { width: canvas.width, height: canvas.height };\n        this.player= new Player(this.dimensions); \n        this.balloons = Balloons.push(new Balloon(canvas.width/2, 80, 'firstBalloon')); // create array of balloon instances \n        this.projectiles = Projectiles.push(new Projectile(this.player.iconX, this.player.iconY,'firstProjectile')); \n        this.registerEvents(); \n        this.spawnBalloon= false;\n        this.score= 0;  \n        // this.collision= false\n    }\n\n    registerEvents(){ \n        document.addEventListener(\"keydown\", this.keyDownHandler.bind(this), false)\n        document.addEventListener(\"keyup\", this.keyUpHandler.bind(this), false)\n    }\n\n    keyDownHandler(e){\n        if(e.key === \"Right\" || e.key === \"ArrowRight\") {\n            this.player.movePlayer(e.key); \n        }\n        else if(e.key === \"Left\" || e.key === \"ArrowLeft\") {\n            this.player.movePlayer(e.key); \n        }\n        else if(e.code === \"Space\"){ \n           // this.projectile.moveProjectile()\n          // Projectiles.push(new Projectile(this.player.iconX, this.player.iconY));\n        //   Projectiles.forEach(projectile=>{\n        //     projectile.moveProjectile()\n        //     projectile.animate(this.ctx,this.player.x,this.player.y)\n        // })\n           shoot = true;\n        }\n    }\n    \n    keyUpHandler(e){ \n        if(e.key === \"Right\" || e.key === \"ArrowRight\") {\n            this.player.stopPlayer(); \n        }\n        else if(e.key === \"Left\" || e.key === \"ArrowLeft\") {\n            this.player.stopPlayer(); \n        }  else if(e.code === \"Space\"){ \n            shoot = false;\n        }\n    }\n\n    collisionDetection(x1, x2, y1, y2, r1, r2){ \n        let dsx= x2 - x1; \n        let dsy= y2- y1; \n        let distance = Math.sqrt(dsx * dsx + dsy * dsy)\n        if (distance < r1 + r2){\n            this.score++;  \n            spawnX= x1; \n            spawnY= y1; \n           // Balloons.splice(0,1); \n           // Projectiles.splice()\n           \n            if(spawnMini){\n                this.doubleBalloon()\n                spawnMini=false\n            }\n            return  true;\n            \n            // console.log(\"Collision\")\n            // this.spawnBalloon=true \n        }\n            \n    }\n\n    doubleBalloon(){ \n        Balloons.push(new Balloon(spawnX, spawnY, 'mini-balloon-right', 34));\n        Balloons.push(new Balloon(spawnX, spawnY, 'mini-balloon-left', 34))\n       \n    }\n\n    drawScore() {\n        this.ctx.font = \"16px Arial\";\n        this.ctx.fillStyle = \"#0095DD\";\n        this.ctx.fillText(\"Score: \"+ this.score, 8, 20);\n    }\n\n    animate(){ \n        this.ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height); \n        if(Projectiles.length != 0 && Balloons.length != 0){\n            Balloons.forEach((balloon,i,arr)=> { \n                Projectiles.forEach((projectile,j,arr2)=>{\n                    balloon.animate(this.ctx)\n                    \n                    //projectile.animate(this.ctx, this.player.iconX, this.player.iconY);\n                    if(balloon.type == 'firstBalloon') spawnMini=true;\n    \n                    if(this.collisionDetection(balloon.x, projectile.pos_x, balloon.y, projectile.pos_y, balloon.r, 2)){\n                        arr.splice(i,1)\n                        i--;\n                        arr2.splice(j,1)\n                        j--;\n                    }\n  \n                })\n            }); \n        }\n        \n        if(shoot){\n            \n            Projectiles.push(new Projectile(this.player.iconX, this.player.iconY,'missile'));\n            shoot =false\n        }\n        if(Projectiles.length!=0){\n            Projectiles.forEach(projectile=>{\n                if(projectile.type == 'missile')\n                {\n                    projectile.moveProjectile()\n                    projectile.animate(this.ctx,this.player.x,this.player.y);\n                }\n            })\n        }\n        this.drawScore();\n        \n        // if(this.score === 3){ \n        //     alert(\"GAME OVER\");\n        //     document.location.reload();\n        //     clearInterval(interval);\n        // }; \n\n        this.player.animate(this.ctx); \n        requestAnimationFrame(this.animate.bind(this)); \n    }\n}","import PopSomeMore from \"./scripts/game\";\nimport './styles/index.css'; \n\nconst canvas= document.getElementById(\"balloon-game\"); \nconst game= new PopSomeMore(canvas);\n// debugger\ngame.animate()"],"sourceRoot":""}