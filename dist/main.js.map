{"version":3,"sources":["webpack://popsomemore/./src/scripts/balloon.js","webpack://popsomemore/./src/scripts/player.js","webpack://popsomemore/./src/scripts/projectile.js","webpack://popsomemore/./src/scripts/game.js","webpack://popsomemore/./src/index.js"],"names":["Balloon","x","y","type","speedX","speedY","r","this","c_width","c_height","speed","maxSpeed","moveLeft","moveUp","gameOver","ctx","beginPath","arc","Math","PI","fillStyle","fill","closePath","moveBalloon","drawBalloon","Player","dimensions","iconX","width","iconY","height","rightPressed","leftPressed","fillRect","key","drawPlayer","Projectile","pos_x","pos_y","fired","strokeStyle","lineWidth","stroke","drawProjectile","Projectiles","Balloons","spawnX","spawnY","spawnMini","shoot","leftBtn","document","querySelector","rightBtn","spaceBtn","getRndInteger","min","max","floor","random","canvas","getContext","firstBalloonSpawnX","firstBalloonSpawnY","player","balloons","push","projectiles","registerEvents","spawnBalloon","score","level","addEventListener","keyDownHandler","bind","keyUpHandler","e","movePlayer","style","backgroundColor","code","stopPlayer","x1","x2","y1","y2","r1","r2","dsx","dsy","sqrt","doubleBalloon","font","fillText","alert","location","reload","clearInterval","interval","clearRect","length","forEach","balloon","i","arr","projectile","j","arr2","animate","collisionDetection","splice","AddNewBalloons","moveProjectile","drawScore","drawLevel","requestAnimationFrame","num","balloonSpawnX","getElementById"],"mappings":"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","file":"main.js","sourcesContent":["// const CONSTANTS= { \n//     DX: getRndInteger(0.5,3.5), \n//     DY: getRndInteger(0.5,3.5)\n// }\n\nexport default class Balloon{ \n    constructor(x, y, type ,speedX,speedY,r = 68){ \n        // this.dimensions= dimensions; \n        this.x = x; \n        this.y = y;\n        this.c_width= 480; \n        this.c_height= 620; \n        this.r= r; \n        // this.width = width;\n        // this.height = height;\n        // this.image = new Image();\n        // this.image.src = src\n        this.type= type;\n        this.speed= 2; \n        this.speedX =speedX \n        this.speedY = speedY\n        this.maxSpeed = 1.3\n        this.moveLeft= false;   \n        this.moveUp= false;  \n        this.gameOver=false\n      \n    }\n\n\n    drawBalloon(ctx){\n        // ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height); \n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, Math.PI*2);\n        ctx.fillStyle = \"#c47de8\";\n        ctx.fill();\n        ctx.closePath(); \n    }\n\n    moveBalloon(){ \n        if(this.x + this.r >= this.c_width || this.x  <=  this.r) {\n            this.speedX = -1 * this.speedX;\n        }\n        if(this.y  <=  this.r) {\n            this.speedY = -1 * this.speedY;\n        }else if (this.y + this.r >= this.c_height){ \n            this.gameOver = true;\n        }\n        if(this.type == 'firstBalloon')\n        {\n          \n            this.x += this.speedX;  \n            this.y += this.speedY;\n        }else{\n            if(this.type == 'mini-balloon-left')\n            {\n                this.x -= this.speedX;  \n                this.y += this.speedY;\n            }\n            else{\n                this.x += this.speedX;  \n                this.y += this.speedY;\n            }\n        }\n      \n    }\n\n    animate(ctx){\n        this.moveBalloon(); \n        this.drawBalloon(ctx);\n    } \n} \n\n","const CONSTANTS= { \n    PLAYER_WIDTH: 15, \n    PLAYER_HEIGHT: 45, \n}; \n\nexport default class Player{ \n    constructor(dimensions){ \n        this.dimensions= dimensions\n        this.iconX=(this.dimensions.width - CONSTANTS.PLAYER_WIDTH)/2; \n        this.iconY= this.dimensions.height - CONSTANTS.PLAYER_HEIGHT;\n        this.rightPressed = false;\n        this.leftPressed = false; \n    }\n\n    drawPlayer(ctx){ \n        ctx.beginPath() \n        ctx.fillRect(this.iconX, \n            this.iconY, \n            CONSTANTS.PLAYER_WIDTH, \n            CONSTANTS.PLAYER_HEIGHT\n        )\n        ctx.fillStyle = \"#0095DD\";\n        ctx.fill();\n        ctx.closePath();\n\n        if(this.rightPressed) {\n            this.iconX += 7;\n            if (this.iconX + CONSTANTS.PLAYER_WIDTH > this.dimensions.width){\n                this.iconX = this.dimensions.width - CONSTANTS.PLAYER_WIDTH;\n            }\n        }\n        else if(this.leftPressed) {\n            this.iconX -= 7;\n            if (this.iconX < 0){\n                this.iconX = 0;\n            }\n        }\n    }\n\n    movePlayer(key){ \n        if(key === \"Right\" || key === \"ArrowRight\"){ \n            this.rightPressed = true\n        } else if ( key=== \"Left\" || key === \"ArrowLeft\"){ \n            this.leftPressed = true\n        }\n    }\n\n    stopPlayer(){ \n        this.rightPressed = false; \n        this.leftPressed = false; \n    }\n\n    animate(ctx){ \n        this.drawPlayer(ctx); \n    }\n}","const CONSTANTS= { \n    RADIUS: 2 \n}\n\nexport default class Projectile{ \n    constructor(pos_x, pos_y,type){ \n        this.pos_x= pos_x; \n        this.pos_y= pos_y;\n        this.fired= false;\n        this.type = type   \n    }\n\n    drawProjectile(ctx, x, y){ \n        ctx.strokeStyle = \"#000\";\n        ctx.beginPath();\n        ctx.arc(this.pos_x, this.pos_y, CONSTANTS.RADIUS, 0, 2 * Math.PI);\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = \"red\";\n        ctx.stroke();\n\n        // if (this.fired){ \n        //     this.pos_y -= 5\n        //     if(this.pos_y <= 0){ \n        //         // this.pos_x= x; \n        //         // this.pos_y= y;\n        //         this.fired= false;  \n        //     }\n        // }else{\n        //     this.pos_x= x; \n        //     this.pos_y= y; \n        // } \n            \n    }\n\n    moveProjectile(){ \n        this.pos_y -= 5\n    }\n\n\n    animate(ctx, x, y){ \n        this.drawProjectile(ctx, x, y)\n    }\n}","import Balloon from './balloon';\nimport Player from './player'; \nimport Projectile from './projectile'; \n\nlet Projectiles= []; \nlet Balloons= [];\nlet spawnX= 0; \nlet spawnY= 0; \nlet spawnMini = false;\nlet shoot = false;\nlet levelIncrease=false;\nlet gameOver=false;\n\n//selectors;\nconst leftBtn = document.querySelector('.left');\nconst rightBtn = document.querySelector('.right');\nconst spaceBtn = document.querySelector('.space');\n\n// leftBtn.addEventListener('click',function(){\n//     console.log('left button clicked')\n    \n// })\n\n\n\n\nexport default class PopSomeMore{ \n    constructor(canvas){ \n        this.ctx= canvas.getContext(\"2d\"); \n        this.dimensions= { width: canvas.width, height: canvas.height };\n        this.firstBalloonSpawnX = this.dimensions.width/2; \n        this.firstBalloonSpawnY = 80;\n        this.player= new Player(this.dimensions); \n        this.balloons = Balloons.push(new Balloon(this.firstBalloonSpawnX, this.firstBalloonSpawnY, 'firstBalloon',getRndInteger(0.5,0.9),getRndInteger(0.5,0.9))); // create array of balloon instances \n        this.projectiles = Projectiles.push(new Projectile(this.player.iconX, this.player.iconY,'firstProjectile')); \n        this.registerEvents(); \n        this.spawnBalloon= false;\n        this.score= 0;\n        this.level= 1;  \n       \n        // this.collision= false\n    }\n\n    registerEvents(){ \n        document.addEventListener(\"keydown\", this.keyDownHandler.bind(this), false)\n        document.addEventListener(\"keyup\", this.keyUpHandler.bind(this), false)\n    }\n\n    keyDownHandler(e){\n        if(e.key === \"Right\" || e.key === \"ArrowRight\") {\n            this.player.movePlayer(e.key); \n            rightBtn.style.backgroundColor = '#bea0da';\n        }\n        else if(e.key === \"Left\" || e.key === \"ArrowLeft\") {\n            this.player.movePlayer(e.key); \n            leftBtn.style.backgroundColor = '#bea0da';\n        }\n        else if(e.code === \"Space\"){ \n           // this.projectile.moveProjectile()\n          // Projectiles.push(new Projectile(this.player.iconX, this.player.iconY));\n        //   Projectiles.forEach(projectile=>{\n        //     projectile.moveProjectile()\n        //     projectile.animate(this.ctx,this.player.x,this.player.y)\n        // })\n           shoot = true;\n           spaceBtn.style.backgroundColor = '#bea0da';\n        }\n    }\n    \n    keyUpHandler(e){ \n        if(e.key === \"Right\" || e.key === \"ArrowRight\") {\n            this.player.stopPlayer(); \n            rightBtn.style.backgroundColor = 'blueviolet';\n        }\n        else if(e.key === \"Left\" || e.key === \"ArrowLeft\") {\n            this.player.stopPlayer(); \n            leftBtn.style.backgroundColor = 'blueviolet';\n        }  else if(e.code === \"Space\"){ \n            shoot = false;\n            spaceBtn.style.backgroundColor = 'blueviolet';\n        }\n    }\n\n    collisionDetection(x1, x2, y1, y2, r1, r2){ \n        let dsx= x2 - x1; \n        let dsy= y2- y1; \n        let distance = Math.sqrt(dsx * dsx + dsy * dsy)\n        if (distance < r1 + r2){\n            this.score++;  \n            spawnX= x1; \n            spawnY= y1; \n           // Balloons.splice(0,1); \n           // Projectiles.splice()\n           \n            if(spawnMini){\n                this.doubleBalloon()\n                spawnMini=false\n            }\n            return  true;\n            \n            // console.log(\"Collision\")\n            // this.spawnBalloon=true \n        }else{\n            return false;\n        }\n            \n    }\n\n    doubleBalloon(){ \n        Balloons.push(new Balloon(spawnX, spawnY, 'mini-balloon-right' ,getRndInteger(0.5,0.9),getRndInteger(0.5,0.9),34));\n        Balloons.push(new Balloon(spawnX, spawnY, 'mini-balloon-left',getRndInteger(0.5,0.9),getRndInteger(0.5,0.9),34));\n        // Balloons.forEach(balloon=>{\n        //     balloon.speedX= 0.6//getRndInteger(0.5,1.2) \n        //     balloon.speedY = 0.6//getRndInteger(0.5,1.2)\n        //     console.log(balloon.speedX,balloon.speedY)\n        // })\n       \n    }\n\n    drawScore() {\n        this.ctx.font = \"16px Arial\";\n        this.ctx.fillStyle = \"#0095DD\";\n        this.ctx.fillText(\"Score: \"+ this.score, 8, 20);\n    }\n\n    drawLevel(){ \n        this.ctx.font = \"16px Arial\";\n        this.ctx.fillStyle = \"#0095DD\";\n        this.ctx.fillText(\"Level: \"+ this.level, this.dimensions.width-100, 20);\n    }\n    animate(){ \n        if(gameOver)\n        {\n            alert(\"GAME OVER\");\n            document.location.reload();\n            clearInterval(interval);\n        }; \n\n        this.ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height); \n        if(Projectiles.length != 0 && Balloons.length != 0){\n            Balloons.forEach((balloon,i,arr)=> { \n                Projectiles.forEach((projectile,j,arr2)=>{\n                    balloon.animate(this.ctx)\n                    \n                    //projectile.animate(this.ctx, this.player.iconX, this.player.iconY);\n                    if(balloon.type == 'firstBalloon') spawnMini=true;\n                    if(balloon.type == 'mini-balloon-left'||balloon.type == 'mini-balloon-right') spawnMini  = false;\n    \n                    if(this.collisionDetection(balloon.x, projectile.pos_x, balloon.y, projectile.pos_y, balloon.r, 2)){\n                        arr.splice(i,1)\n                        i--;\n                        arr2.splice(j,1)\n                        j--;\n                    }\n  \n                })\n            }); \n        }\n        if(Balloons.length==0)\n        {\n\n            if(!gameOver)\n            {\n                this.level++;\n            }\n            \n            \n            if(this.level==2)\n            {\n                this.AddNewBalloons(2)\n            }\n            if(this.level==3)\n            {\n                this.AddNewBalloons(3)\n            }\n           \n            \n        }\n        Balloons.forEach(balloon=>{\n            if(balloon.gameOver==true)\n          {\n            gameOver=true;\n          }\n        })\n        \n        if(shoot){\n            \n            Projectiles.push(new Projectile(this.player.iconX, this.player.iconY,'missile'));\n            shoot =false\n        }\n        if(Projectiles.length!=0){\n            Projectiles.forEach(projectile=>{\n                if(projectile.type == 'missile')\n                {\n                    projectile.moveProjectile()\n                    projectile.animate(this.ctx,this.player.x,this.player.y);\n                }\n            })\n        }\n        this.drawScore();\n        this.drawLevel(); \n        \n        // if(this.score === 3){ \n        //     alert(\"GAME OVER\");\n        //     document.location.reload();\n        //     clearInterval(interval);\n        // }; \n\n        this.player.animate(this.ctx); \n        requestAnimationFrame(this.animate.bind(this)); \n    }\n    AddNewBalloons(num){\n        for(let i=0;i<num;i++)\n        {\n            let balloonSpawnX = getRndInteger(0,this.dimensions.width)\n            Balloons.push(new Balloon(balloonSpawnX, this.firstBalloonSpawnY, 'firstBalloon',getRndInteger(0.5,0.9),getRndInteger(0.5,0.9)))\n        }\n    }\n}\n\n\n\n\n\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) ) + min;\n  }","import PopSomeMore from \"./scripts/game\";\nimport './styles/index.css'; \n\nconst canvas= document.getElementById(\"balloon-game\"); \nconst game= new PopSomeMore(canvas);\n\n// debugger\ngame.animate()"],"sourceRoot":""}